/*
 * Post Class
 */

var Post = module.exports = exports = function(json){
	this.fromJson(json);
};

/* Conversion Helper Functions */
var fnData = function(){
		// Returns non private data as an object
		var result = {};
		for (var key in this){
			if (typeof this[key] !== "function" && key.charAt(0) !== '_'){
				result[key] = this[key];
			}
		}
		return result;
	},

	fnToArray = function(){
		// Returns non proviate data as an array
		var result = [];
		for (var key in this){
			if (typeof this[key] !== "function" && key.charAt(0) !== '_'){
				result.push(this[key]);
			}
		}
	},
	
	fnFromJson = function(json){
		// Takes a string and maps it to the non-private data of the object
		var obj = {};
		if (typeof json === "object"){
			obj = json;
		}else if (typeof json === "string"){
			obj = JSON.parse(json);
		}
		for (var key in obj){
			if (key in this && typeof this[key] !== "function"){
				this[key] = obj[key];
			}
		}
	},
	
	fnFromSql = function(row){
		// Takes an returned row and maps it to the object data
		for (var key in row){
			var objKey = key.toLowerCamelCase();
			if (objKey in this && typeof this[key] !== "function" && key.charAt(0) !== '_'){
				this[objKey] = row[key];
			}
		}
	},
	
	fnToSqlSelect = function(){
		// Converts the object into a valid SQL SELECT statement
		var fields = [];
		for (var key in this){
			if (typeof this[key] !== "function" && key.charAt(0) !== '_'){
				fields.push(key.toUnderScore());
			}
		}
		return 'SELECT ' + fields.join() + ' FROM ' + this._table + ' WHERE ' + this._id.toUnderScore() + ' = $' + this._id + ';';
	},
	
	fnToSqlInsert = function(){
		// Converts the object into a valid SQL INSERT statement
		var params = [],
			fields = [];
		for (var key in this){
			if (typeof this[key] !== "function" && key.charAt(0) !== '_'){
				params.push('$' + key);
				fields.push(key.toUnderScore());
			}
		}
		return 'INSERT INTO ' + this._table + '(' + fields.join() + ') VALUES (' + params.join() + ');';
	},
	
	fnToSqlUpdate = function(){
		// Converts the object into a valid SQL UPDATE statement
		var cols = [];
		for (var key in this){
			if (key != this._id && typeof this[key] !== "function" && key.charAt(0) !== '_'){
				cols.push(key.toUnderScore() + ' = $' + key);
			}
		}
		return 'UPDATE ' + this._table + ' SET ' + cols.join(', ') + ' WHERE ' + this._id.toUnderScore() + ' = $' + this._id + ';';
	},
	
	fnToSqlDelete = function(){
		// Converts the object into a valid SQL DELETE statement
		return 'DELETE FROM ' + this._table + ' WHERE ' + this._id.toUnderScore() + ' = $' + this._id + ';';
	},
	
	fnToSqlParams = function(){
		// Converts the object into a valid set of SQL parameters to be passed when executing at statement
		var params = {};
		for (var key in this){
			if (typeof this[key] !== "function" && key.charAt(0) !== '_'){
				params['$'+key] = this[key];
			}
		}
		return params;
	},
	
	fnToSqlId = function(){
		var result = {};
		result["$" + this._id] = this[this._id];
		return result;
	};

Post.prototype = {
	// Data Structure
	id: "",
	createdUserId: "",
	createdTs: "",
	modifiedUserId: "",
	modifiedTs: "",
	subject: "",
	content: "",
	status: "",

	// Private Variables
	_table: "posts",
	_id: "id",

	// Helper Functions
	data: fnData,
	toArray: fnToArray,
	fromJson: fnFromJson,

	fromSql: fnFromSql,
	toSqlSelect: fnToSqlSelect,
	toSqlInsert: fnToSqlInsert,
	toSqlUpdate: fnToSqlUpdate,
	toSqlDelete: fnToSqlDelete,
	toSqlParams: fnToSqlParams,
	toSqlId: fnToSqlId
};